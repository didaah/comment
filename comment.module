<?php
// $Id$

/**
 * hook_comment_info() 默认设置
 */
function comment_default_info() {
  return array(
    'name' => '评论',  // 评论名称
    'user_anonymous' => false, // 允许匿名评论，默认为 false
    'user_anonymous_mail' => true, // 匿名评论必须输入邮箱，默认为 true
    'user_anonymous_username' => true, // 匿名评论必须输入昵称，默认为 true
    'user_anonymous_site' => false, // 匿名评论必须输入主页，默认为 false
    'user_mail' => false, // 登录用户是否可以输入邮箱，默认为 false
    'user_site' => false, // 登录用户是否可以输入主页，默认为 false
    'user_mail_required' => false, // 登录用户是否必须输入邮箱
    'user_site_required' => false, // 登录用户是否必须输入主页
    'field_title' => true, // 启用标题，默认为 true
    'field_title_required' => false, // 必须输入标题，默认为 false
    'field_title_max' => 255, // 标题最大长度，不超过 255
    'field_title_min' => 0, // 标题最小长度
    'field_body_required' => true, // 必须输入评论内容，默认为 true
    'field_body_max' => 50000, // 内容最大长度
    'field_body_min' => 2, // 内容最小长度
    'field_captcha_all' => false, // 针对所有人启用验证码，默认为 false
    'field_captcha_anonymous' => true, // 针对匿名用户启用验证码，默认为 true
    'number_desc' => false, // 评论列表编号顺序，默认为正序，从 1 到 100，设置为 true 则为倒序，从 100 到 1
    'captcha' => array(
      //'image' => 1, // 0：文字验证码，1、图片验证码
      //'type' => DIDA_CAPTCHA_TYPE_INT, // 验证码文本类型
     ),
    'filter_comment' => true, // 评论过滤，只看某某功能
    'comment_quote' => true, // 评论引用
    'comment_reply' => true, // 评论回复
    'watermark' => false, // 通过编辑器上传的图片是否添加水印，默认 true | false
    'default_status' => 1, // 评论状态，默认为 0：未审核
    'editor' => true, // bool|array true 为启用编辑，或直接使用 array 设置默认编辑器配置，该配置可由管理员在后台修改，依赖于 editor 模块
    // 'default_format' => 0, // 输入格式，留空则使用默认
  );
}

/**
 * 获取指定或全部评论类型
 * @param string $key
 *  指定评论类型
 */
function comment_get_comment_info($key = NULL) {
  static $data;

  if (!isset($data)) {
    $default = comment_default_info();
    if ($infos = module_invoke_all('comment_info')) {
      foreach ($infos as $name => $info) {
        $data[$name] = array_merge($default, $info);
        $data[$name]['key'] = $name;
      }
    }
  }
  
  return $key ? $data[$key] : $data;
}

/**
 * 评论表单
 * @param (object) $o
 */
function comment_form($o) {

  if (!comment_is_create($o)) {
    // 没有权限发布评论
    return false;
  }
  
  if ($datas = comment_get_comment_info()) {
    // 隐藏其它评论类型的编辑器实例
    global $editor_disabled;
    foreach ($datas as $name => $i) {
      $key = 'comment_' . $name;
      if ($name != $o->ext_type) {
        $editor_disabled[$key] = true;
      }
    }
  }

  global $user, $conf;
  
  if ($user->uid == 0) {
    $form['fields']['name'] = array(
      '#title' => t('comment', '昵称'),
      '#type' => 'textfield',
      '#weight' => -100,
      '#required' => $o->info['user_anonymous_username']
    );

    $form['fields']['mail'] = array(
      '#title' => t('comment', '邮箱'),
      '#type' => 'textfield',
      '#weight' => -95,
      '#attributes' => array(
        'class' => "{email:true}"
      ),
      '#required' => $o->info['user_anonymous_mail']
    );

    $form['fields']['site'] = array(
      '#title' => t('comment', '主页'),
      '#type' => 'textfield',
      '#weight' => -90,
      '#required' => $o->info['user_anonymous_site'],
      '#attributes' => array(
        'class' => "{url:true}"
      ),
    );
  } else {
    $form['fields']['_name'] = array(
      '#title' => t('comment', '昵称'),
      '#weight' => -100,
      '#value' => $user->name
    );

    $form['fields']['name'] = array(
      '#type' => 'hidden',
      '#constant' => 1,
      '#default_value' => $user->name
    );

    if (!empty($o->info['user_mail'])) {
      $form['fields']['mail'] = array(
        '#title' => t('comment', '邮箱'),
        '#type' => 'textfield',
        '#weight' => -95,
        '#default_value' => $user->mail,
        '#attributes' => array(
        '#required' => $o->info['user_mail_required'],
          'class' => "{email:true}"
        ),
      );
    }

    if (!empty($o->info['user_site'])) {
      $form['fields']['site'] = array(
        '#title' => t('comment', '主页'),
        '#type' => 'textfield',
        '#weight' => -90,
        '#required' => $o->info['user_site_required'],
        '#attributes' => array(
          'class' => "{url:true}"
        ),
      );
    }

  }
  
  if ($o->info['field_title']) {
    if ($o->info['field_title_min']) {
      if ($o->info['field_title_min'] > 255) {
        $rangelength[0] = 255;
      } else {
        $rangelength[0] = $o->info['field_title_min'];
      }
    } else {
      $rangelength[0] = 0;
    }
    
    if ($o->info['field_title_max']) {
      if ($o->info['field_title_max'] > 255) {
        $rangelength[1] = 255;
      } else {
        $rangelength[1] = $o->info['field_title_max'];
      }
    } else {
      $rangelength[1] = 255;
    }
    
    $form['fields']['title'] = array(
      '#title' => t('comment', '标题'),
      '#type' => 'textfield',
      '#weight' => -80,
      '#default_value' => $o->title,
      '#required' => $o->info['field_title_required'],
      '#attributes' => array(
        'size' => 50,
        'class' => '{rangelength: ['.$rangelength[0].', '.$rangelength[1].']}'
      ),
    );
  }
  
  if ($o->info['field_body_min']) {
    if ($o->info['field_body_min'] > 50000) {
      $rangelength[0] = 50000;
    } else {
      $rangelength[0] = $o->info['field_body_min'];
    }
  } else {
    $rangelength[0] = 0;
  }
  
  if ($o->info['field_body_max']) {
    if ($o->info['field_body_max'] > 50000) {
      $rangelength[1] = 50000;
    } else {
      $rangelength[1] = $o->info['field_body_max'];
    }
  } else {
    $rangelength[1] = 50000;
  }

  // 转义 <textarea> 标签，防止编辑器破坏页面
  if (!empty($o->body)) {
    $o->body = str_replace(array('<textarea>', '</textarea>'), array('&lt;textarea&gt;', '&lt;/textarea&gt;'), $o->body);   
  }

  $form['fields']['body'] = array(
    '#type' => 'textarea',
    '#title' => t('comment', '内容'),
    '#default_value' => $o->body,
    '#weight' => -1,
    '#required' => $o->info['field_body_required'],
    '#attributes' => array(
      'id' => 'comment_form_type_body',
      'class' => '{rangelength: [' . $rangelength[0] . ', ' . $rangelength[1] . ']}'
    ),
  );
  
  if ($o->info['field_captcha_all'] || ($user->uid == 0 && $o->info['field_captcha_anonymous'])) {
  
    if (!empty($conf['captcha']['comment'])) {
      $captcha = $conf['captcha']['comment'];
    } else {
      $captcha = array();
    }

    if (!empty($o->info['captcha'])) {
      $captcha = array_merge($captcha, $o->info['captcha']);
    }
    
    $form['fields']['captcha'] = array(
      '#type' => 'captcha',
      '#title' => t('blog', '验证'),
      '#required' => 1,
      '#captcha' => $captcha,
    );
  }
  
  $form['fields']['format'] = filter_form_field(isset($o->format) ? $o->format : $o->info['default_format'], 1);
  
  $form['fields']['cid'] = $form['fields']['nid'] = array(
    '#type' => 'hidden',
    '#default_value' => $o->cid,
    '#constant' => 1
  );
  
  $form['fields']['ext_id'] = array(
    '#type' => 'hidden',
    '#default_value' => isset($o->ext_id) ? $o->ext_id : 0,
    '#constant' => 1
  );
  
  $form['fields']['ext_id2'] = array(
    '#type' => 'hidden',
    '#default_value' => isset($o->ext_id2) ? $o->ext_id2 : 0,
    '#constant' => 1
  );
  
  $form['fields']['ext_type'] = array(
    '#type' => 'hidden',
    '#default_value' => $o->ext_type,
    '#constant' => 1
  );
  
  $form['fields']['status'] = array(
    '#type' => 'hidden',
    '#default_value' => isset($o->status) ? $o->status : $o->info['default_status'],
    '#constant' => 1
  );
  
  $form['fields']['uid'] = array(
    '#type' => 'hidden',
    '#default_value' => isset($o->uid) ? $o->uid : $user->uid,
    '#constant' => 1
  );
  
  $form['fields']['pid'] = array(
    '#type' => 'hidden',
    '#default_value' => isset($o->pid) ? $o->pid : 0,
    '#constant' => 1
  );
  
  $form['fields']['button'] = array(
    '#type' => 'submit',
    '#submit' => 'comment_form_submit',
    '#weight' => 100,
  );
  
  $form['settings'] = array(
    '#ajax_validate' => 1,
    '#values_object' => 1,
    '#noCache' => 1,
    '#redirect' => $o->redirect ? $o->redirect : NULL,
    '#validate' => array('comment_form_validate'),
  );

  // @TODO 该参数将废弃，统一使用 hook_comment_form()
  $function = $o->cid ? $o->info['from_update_call'] : $o->info['from_insert_call'];

  if ($function && function_exists($function)) {
    $function($form, $o);
  }

  field_get_node_form('comment', 'cm_' . $o->ext_type, $o, $form);

  module_alter_all('comment_form', $form, $o);
  
  dd_add_css(dd_get_path('module', 'comment').'/comment.css');
  return $form;
}

/**
 * @Implement of hook_system_site_captcha()
 */
function comment_system_site_captcha($op) {
  if ($op == 'fields') {
    return array(
      'comment' => array(
        'title' => t('user', '评论'),
        'attributes' => array('#disabled' => 1, '#default_value' => 1, '#required' => false),
      ),
    );
  }
}

function comment_form_validate(&$form, &$v) {
  return comment_validate($v['_dida_values']);
}

function comment_form_submit(&$form, &$v) {
  if (comment_save($v['_dida_values'])) {
    // 将文件关联到评论
    db_exec('UPDATE {files} SET ext_type = ?, ext_id = ?, ext_id2 = ?, status = 1 WHERE ext_type = ?', 
    array('comment', $v['_dida_values']->cid, $v['_dida_values']->ext_id, $form['#form_token']));
    $message = t('comment', '发布成功');
 
    if ($v['_dida_values']->status > 0) {
      if ($v['_dida_values']->_db_write_record_is_update) {
        $message = t('comment', '更新成功');
      }

      if (!isset($form['settings']['#redirect'])) {
        if (!empty($v['_dida_values']->redirect)) {
          $form['settings']['#redirect'] = $v['_dida_values']->redirect;
        } else {
          $form['settings']['#redirect'] = url($_GET['q'], array(
            'query' => ($v['_dida_values']->go_pager ? 'page='.$v['_dida_values']->go_pager : ''),
            'fragment' => 'comment_'.$v['_dida_values']->ext_type.'_'.$v['_dida_values']->cid
          ));
        }
      }
    } else {
      $message = t('comment', '保存成功，正在等待审核');
    }
  } else {
    $message = t('comment', '保存失败');
  }
  
  dd_set_message($message);
}

/**
 * @Implement of hook_editor_info()
 */
function comment_editor_info() {
  $editor = array();

  if (!$datas = comment_get_comment_info()) {
    return false;
  }
  
  $default = array(
    'dom' => 'comment_form_type_body',
    'form_id' => 'comment_form',
    'form_field_name' => 'body',
    'files' => array(
      '#validate' => array(
        'status' => 0,
      )
    ),
    'config' => array(
      'toolbar' => 'small', 
    ),
  );

  foreach ($datas as $key => $info) {
    // 不需要编辑器
    if (empty($info['editor'])) continue;

    $data =  is_array($info['editor']) ?  array_merge($default, $info['editor']) : $default;

    $editor['comment_' . $key] = array(
      'name' => $info['name'],
      'status' => 1, 
      'data' => $data
    );
  }
  
  return $editor;
}

/**
 * @Implement of hook_field_call_group()
 */
function comment_field_call_group($type = NULL) {
  // 评论字段
  if ($datas = comment_get_comment_info()) {
    $groups = array();
    foreach ($datas as $key => $info) {
      $groups['cm_' . $key] = array(
        'title' => t('comment', '!name属性', array('!name' => $info['name'])),
        'fieldset' => true,
      );
    }
    return $type ? $groups[$type] : $groups;
  }
}

/**
 * @Implement of hook_field_term_view()
 */
function comment_field_term_view($term) {
  // cm_
  if (!$type = comment_get_comment_info(substr($term->field->type, 3))) {
    dd_get_access();
  }
   
  dd_set_title(array($term->name, $term->field->name, $type['name']));
  dd_set_breadcrumb(array(l($term->field->name, 'fields/' . $term->field->field_id), $term->name));
  dd_set_html_head('<meta name="keywords" content="' . $term->name . '|' . $term->field->name . '|' . $type['name'] . '" />');
  dd_set_html_head('<meta name="description" content="' . $term->description . '" />');
 
  $content = system_no_content();

  $terms = array($term->tid => $term->name);

  // 获取类别的所有子级
  field_get_term_childrens($term->fid, field_get_cache_term_id($term->field->field_id), $terms);

  $query = 'SELECT DISTINCT(ftn.nid), n.* FROM {comment} n INNER JOIN {fields_term_node} ftn ON n.cid = ftn.nid';

  $tids = array();
  
  foreach ($terms as $tid => $name) {
    $tids[] = $tid;
  }
  
  $query .= ' WHERE n.status > 0 AND ftn.tid IN (' . implode(',', $tids) . ')';
  $query .= ' ORDER BY n.created DESC';

  if ($count = db_query(preg_replace('/SELECT.*?FROM/ims', 'SELECT COUNT(DISTINCT(ftn.nid)) FROM', $query), $args, 
  array('return' => 'column'))) {
    if ($term->fetch = pager_query($query, 20, 0, $count)) {
      $field->pager = pager_view();
      $item = array();
      foreach ($term->fetch as $o) {
        $item[] = l($o->title, 'comment/goto/' . $o->cid);
      }
      $content = theme('item_list', $item);
      $content .= $field->pager;
    }
  }

  return $content;
}

/**
 * @Implement of hook_field_view()
 */
function comment_field_view($field) {
  // cm_
  if (!$type = comment_get_comment_info(substr($field->type, 3))) {
    dd_get_access();
  }
  
  dd_set_title(array($field->name, $type['name']));
  dd_set_breadcrumb(array($field->name));
  dd_set_html_head('<meta name="keywords" content="' . $field->name . '|' . $type['name'] . "\" />\n");
  dd_set_html_head('<meta name="description" content="' . $field->description . "\" />\n");

  $content = system_no_content();

  if ($terms = field_get_cache_term_id($field->field_id)) {
    $query = 'SELECT DISTINCT(ftn.nid), n.* FROM {comment} n INNER JOIN {fields_term_node} ftn ON n.cid = ftn.nid';
    $tids = array();
    
    foreach ($terms as $term) {
      $tids[] = $term->tid;
    }
    
    $query .= ' WHERE n.status > 0 AND ftn.tid IN (' . implode(',', $tids) . ')';
    $query .= ' ORDER BY n.created DESC';

    if ($count = db_query(preg_replace('/SELECT.*?FROM/ims', 'SELECT COUNT(DISTINCT(ftn.nid)) FROM', $query), $args, 
    array('return' => 'column'))) {
      if ($field->fetch = pager_query($query, 20, 0, $count)) {
        $field->pager = pager_view();
        $item = array();
        foreach ($field->fetch as $o) {
          $item[] = l($o->title, 'comment/goto/' . $o->cid);
        }
        $content = theme('item_list', $item);
        $content .= $field->pager;
      }
    }
  }

  return $content;
}

// public comment_validate(&$comment) {{{ 
/**
 * comment_validate
 * 评论验证
 * 
 * @param object $comment 
 * @access public
 * @return array|false
 */
function comment_validate(&$comment) {
  $error = NULL;
  
  if (!empty($comment->cid)) $comment->nid = $comment->cid;

  if ($info = comment_get_comment_info($comment->ext_type)) {
    if ($comment->title) {
      $strlen = mb_strlen($comment->title);
      if ($strlen > $info['field_title_max']) {
        $error['title']['#error'][] = t('comment', '标题长度最大 !strlen 字符', array('!strlen' => $info['field_title_max']));
      } else if ($strlen < $info['field_title_min']) {
        $error['title']['#error'][] = t('comment', '标题长度最小 !strlen 字符', array('!strlen' => $info['field_title_min']));
      }
    } else if ($comment->body) {
      $strlen = mb_strlen($comment->body);
      if ($strlen > $info['field_body_max']) {
        $error['body']['#error'][] = t('comment', '内容长度最大 !strlen 字符', array('!strlen' => $info['field_body_max']));
      } else if ($strlen < $info['field_body_min']) {
        $error['body']['#error'][] = t('comment', '内容长度最小 !strlen 字符', array('!strlen' => $info['field_body_min']));
      }
    }
  }
  
  if (!$error) {
    $error = field_get_node_validate('comment', 'cm_' . $comment->ext_type, $comment);
  }

  if (!$error) {
    $error = module_invoke_all('comment_validate', $comment);
  }
  
  return $error;
}
// }}}

function comment_save(&$comment) {
  if (!isset($comment->updated)) {
    $comment->updated = $_SERVER['REQUEST_TIME'];
  }
  
  if ($comment->cid) {
    $args = array('cid');
    $comment->op = 'update';
  } else {
    if (!isset($comment->created)) {
      $comment->created = $_SERVER['REQUEST_TIME'];
    }
    $args = NULL;
    $comment->op = 'insert';
    $comment->host = ip_address();
  }
  
  if (db_write_record('comment', $comment, $args)) {
    $comment->nid = $comment->cid;
    // 扩展属性
    field_get_node_save('comment', 'cm_' . $comment->ext_type, $comment);
    module_invoke_all('comment_save', $comment);
    return true;
  }
}

/**
 * 加载评论对象
 * @param (int) $cid
 */
function comment_load($cid) {
  static $comments;
  
  if (!isset($comments[$cid])) {
    if ($comments[$cid] = db_query('SELECT c.*, u.name FROM {comment} c INNER JOIN {users} u 
    ON c.uid = u.uid WHERE c.cid = ?', array($cid), array('return' => 'one'))) {
      if ($comments[$cid]->data) {
        $comments[$cid]->data = unserialize($o->data);
      } else {
        $comments[$cid]->data = array();
      }
      $comments[$cid]->nid = $nid;
      // 扩展属性
      field_get_node_load('comment', 'cm_' . $comments[$cid]->ext_type, $comments[$cid]);
      module_alter_all('comment_load', $comments[$cid]);
    }
  }
  
  return $comments[$cid];
}

/**
 * 删除评论，不检查权限，调用此函数应先使用 comment_is_delete() 检查权限
 * @param (int|object) $cid
 * 	评论 id 或一个评论对象
 * @return (bool)
 */
function comment_delete($comment) {
  if (!is_object($comment)) $comment = comment_load($comment);
  if (!empty($comment->cid)) {
    if (db_exec('DELETE FROM {comment} WHERE cid = ?', array($comment->cid))) {
      // 删除与评论关联的文件
      if ($fetch = db_query('SELECT fid, filepath FROM {files} WHERE ext_type = ? AND ext_id = ?',
      array('comment', $comment->cid))) {
        foreach ($fetch as $o) {
          file_delete($o->fid, 1, $o->filepath);
        }
        db_exec('DELETE FROM {files} WHERE ext_type = ? AND ext_id = ?', array('comment', $comment->cid));
      }
      // 删除扩展字段
      field_get_node_load('comment', 'cm_' . $comment->ext_type, $comment);
      module_invoke_all('comment_delete', $comment);
      return true;
    }
  }
}

/**
 * 验证评论浏览权限
 * @param object $comment
 * @return bool
 */
function comment_is_view($comment) {
 
  // 默认允许，可在 hook_comment_is_view 中将 $o->is_view 设为 false
  if ($comment->status > 0) {
    $comment->is_view = true;

    module_invoke_all('comment_is_view', $comment);
    
    return $comment->is_view;
  } 
}

/**
 * 验证评论删除权限
 * @param object $comment
 * @return bool
 */
function comment_is_delete($comment) {
  if (empty($GLOBALS['user']->uid)) return false;

  // 默认不允许，可在 hook_comment_is_delete 中将 $o->is_delete 设为 true
  $comment->is_delete = false;

  module_invoke_all('comment_is_delete', $comment);
  
  return $comment->is_delete;
}

/**
 * 验证评论编辑权限
 * @param object $comment
 * @return bool
 */
function comment_is_update($comment) {  
  if (empty($GLOBALS['user']->uid)) return false;

  // 默认不允许，可在 hook_comment_is_update 中将 $o->is_update 设为 true
  $comment->is_update = false;

  module_invoke_all('comment_is_update', $comment);
  
  return $comment->is_update;
}

/**
 * 验证当前用户是否有权限发布评论
 * @param object $o
 *  评论设置相关信息
 * @return bool
 */
function comment_is_create($o) {
  if (!isset($o->ext_type)) {
    // 必须有扩展类型
    return false;
  }
  
  if (!$o->info = comment_get_comment_info($o->ext_type)) {
    // 评论接口信息不存在， hook_comment_info() 必须定义
    return false;
  }
  
  if (!$o->info['user_anonymous'] && $GLOBALS['user']->uid == 0) {
    // 匿名用户不允许评论
    return false;
  }

  // 默认不允许，可在 hook_comment_is_create 中将 $o->is_create 设为 true
  $o->is_create = false;

  module_invoke_all('comment_is_create', $o);
  
  return $o->is_create;
}

/**
 * 根据扩展类型、扩展 id 获取评论
 * @param (string) $ext_type
 *  扩展类型
 * @param (int) $ext_id
 *  扩展 id
 * @param (int) $count
 *  获取数量
 * @param (bool) $pager
 *  是否分页
 * @param (string) $order
 *  评论排序
 * @param (string) $sql_suffix
 *  附加 sql
 */
function comment_ext_view($ext_type, $ext_id = NULL, $count = 50, $pager = true, $order = 'ASC', $sql_suffix = NULL) {
  
  $type_info = comment_get_comment_info($ext_type);

  $query = 'SELECT c.* FROM {comment} c';
  
  if (!empty($_GET['filter_comment'])) { 
    $query .= ' INNER JOIN {users} u ON c.uid = u.uid';
  }
  
  $args = array($ext_type);

  if (isset($ext_id)) {
    $query .= ' WHERE c.ext_type = ? AND c.status > 0 AND c.ext_id = ? ';
    $args[] = $ext_id;
  } else {
    $query .= ' WHERE c.ext_type = ? AND c.status > 0';
  }
  
  if (!empty($_GET['filter_comment'])) { 
    if (is_numeric($_GET['filter_comment'])) {
      $query .= ' AND c.uid = ?';
    } else { 
      $query .= ' AND c.name = ?';
    }
    $args[] = $_GET['filter_comment'];
  }
 
  $query .= $sql_suffix;

  $query .= ' ORDER BY c.cid ' . $order;

  if ($pager) {
    $fetch = pager_query($query, $count, 0, NULL, $args);
    global $pager_page_array, $pager_total, $pager_total_items;
    $rows_count = $pager_total_items[0];
  } else {
    $fetch = db_query($query, $args, array('limit' => $count));
    $rows_count = $count;
  }

  if ($fetch) {
    
    $create = new stdClass;
    $create->ext_type = $ext_type;
    $create->ext_id = $ext_id;
    
    $is_create = comment_is_create($create);
    $data->view = '<div id="comment_view_wrapper">';
    $i = 1;
    foreach ($fetch as $o) {
      
      if ($o->data) {
        $o->data = unserialize($o->data);
      } else {
        $o->data =  array();
      }
      
      $o->count = $_GET['page']*$count+$i;

      // 倒序
      if (!empty($type_info['number_desc'])) {
        $o->count = $rows_count-$o->count+1;
      }
      
      $o->body = filter_view($o->body, $o->format);
      
      $o->links = '';
      
      if (comment_is_update($o)) {
        $o->links .= l(t('forum', '编辑'), 'comment/edit/'.$o->cid);
      }
      if (comment_is_delete($o)) {
        $o->links .= l(t('forum', '删除'), 'comment/delete/'.$o->cid,
        array('attributes' => array('class' => 'confirm')));
      }
      
      if ($type_info['filter_comment']) {
        if (empty($_GET['filter_comment'])) {
          $o->filter_comment = url($_GET['q'], array('query' => 'filter_comment=' . ($o->uid ? $o->uid : $o->name)));
        } else {
          $o->filter_comment_all = url($_GET['q']);
        }
      }

      if ($type_info['comment_reply']) {
        $o->comment_reply = true;
      }
      
      if ($type_info['comment_quote']) {
        $o->comment_quote = true;
      }

      $o->nid = $o->cid;
      field_get_node_load('comment', 'cm_' . $o->ext_type, $o);
      field_get_node_view('comment', 'cm_' . $o->ext_type, $o, 2);
      $o->field_html = field_get_node_html('comment', $o);
      module_alter_all('comment_view', $o);
      $o->is_create = $is_create;
      $data->view .= theme('comment', $o);
      ++$i;
    }
    
    $data->view .= '</div>';
    
    if ($pager) {
      // 评论翻页参数
      $data->pager = pager_view(array(), $count, 0, NULL, 7, array('fragment' => 'comment_view_wrapper'));
    }
    
  }
  
  dd_add_js(dd_get_path('module', 'comment').'/comment.js');
  dd_add_css(dd_get_path('module', 'comment').'/comment.css');
  return $data;
}

/**
 * @Implement of hook_theme()
 */
function comment_theme() {
  return array(
    'comment' => array(
      'tpl' => 'comment.tpl.php',
      'title' => t('forum', '评论模块'),
      'args' => array('comment'),
    ),
  );
}

/**
 * @Implement of hook_template_preprocess_x()
 * 
 * 评论可按扩展类型创建模板文件：
 * comment_{$comment->ext_type}.tpl.php
 * comment.tpl.php
 * 
 */
function comment_template_preprocess_comment(&$var, $hook) {
  if ($var['comment']->ext_type) {
    $var['theme_config']->tpl[] = 'comment_'.$var['comment']->ext_type.'.tpl.php';
  } 
}

/**
 * @Implement of hook_menu()
 */
function comment_menu() {
  $items = array();

  $items['comment/edit/%'] = array(
    'load_functions' => array(2 => array('comment_load')),
    'description' => '编辑评论',
    'access_callback' => 'comment_is_update',
    'access_arguments' => array(2),
    'page_callback' => 'comment_page_edit',
    'page_arguments' => array(2),
    'file' => 'comment.page.inc',
  );

  $items['comment/delete/%'] = array(
    'load_functions' => array(2 => array('comment_load')),
    'description' => '删除评论',
    'access_callback' => 'comment_is_delete',
    'access_arguments' => array(2),
    'page_callback' => 'comment_page_delete',
    'page_arguments' => array(2),
    'file' => 'comment.page.inc',
  );

  $items['comment/goto/%'] = array(
    'load_functions' => array(2 => array('comment_load')),
    'description' => '根据评论 id 跳转到所属节点',
    'access_callback' => 'comment_is_view',
    'access_arguments' => array(2),
    'page_callback' => 'comment_page_goto',
    'page_arguments' => array(2),
    'file' => 'comment.page.inc',
  );

  $items['admin/comment'] = array(
    'title' => '评论管理',
    'access_arguments' => array('comment admin view'),
    'page_callback' => 'comment_admin_page',
    'file' => 'comment.admin.inc',
  );

  $items['admin/comment/fields'] = array(
    'title' => '评论字段',
    'access_arguments' => array('comment admin fields'),
    'page_callback' => 'comment_admin_fields',
    'file' => 'comment.admin.inc',
  );

  return $items;
}

/**
 * @Implement of hook_perm()
 */
function comment_perm() {
  return array(
    'comment admin view' => '管理所有评论',
    'comment admin fields' => '管理评论字段',
  );
}

/**
 * @Implement of hook_system_admin_menus()
 */
function comment_system_admin_menus() {
  return array(array(
    array(t('comment', '评论管理'), 'admin/comment'),
    array(t('comment', '评论字段'), 'admin/comment/fields'),
  ), t('comment', '评论'));
}

/**
 * @Implement of hook_filter()
 */
function comment_filter($op, $delta = NULL, $format = NULL, $value = NULL, $filter_id = NULL, $node_type = NULL, $node_nid = NULL) {
  switch ($op) {
    case 'view':
      
      if ($delta == 0 && strpos($value, '[comment@') !== false) {
        $value = preg_replace_callback('/\[comment@(.*?)=(.*?)\]/i', '_comment_filter_get_link', $value);
        dd_jqui();
      }
      
    return $value;
    case 'list':
    return array(
      array(
        'title' => t('comment', '评论回复'),
        'description' => t('comment', '将评论中的 类似 [comment@昵称=cid] 的标签解析为指向该评论的链接')
      )
    );
  }
}

/**
 * 将 [comment@用户名字=cid] 标签转为链接
 * @param $mat
 */
function _comment_filter_get_link($mat) {
  if ($mat[2]) {
    return l('@'.$mat[1], f('custom.php?module=comment&iframe=true&op=load&bootstrap=full&cid='.$mat[2]), array(
      'attributes' => array(
        'class' => 'dialog',
        'alt' => t('comment', '回复 !name', array('!name' => $mat[1])),
        'title' => t('comment', '查看评论'),
      )
    ));
  }
}

/**
 * @Implement of hook_call_custom()
 */
function comment_call_custom($v) {
  
  switch ($v['op']) {
    case 'preview': // 预览
      if ($v['bootstrap'] == 'full') {
        if ($_POST['data']) {
          // 预览中不允许使用 php 代码执行器
          echo theme('print', filter_view(str_replace('<?php', '&lt;?php', $_POST['data']), $_POST['format']));
          exit;
        }
      }
    break;
    
    case 'load':
      if ($v['cid'] && $v['bootstrap'] == 'full') {
        
        if ($comment = db_query('SELECT cid, body, status, name, format, ext_type, created FROM {comment} WHERE cid = ?',
        array($v['cid']), array('return' => 'one'))) {
          
          if ($comment->status) {
            dd_add_css(dd_get_path('module', 'comment').'/comment.css');
            $content = '<p class="comment_header">' . t('comment', '!name 发布于 !time', array('!name' => $comment->name, '!time' => format_date($comment->created))) . '</p>';
            $content .= '<p class="comment_body">'. filter_view($comment->body, $o->format, 'comment_'.$comment->ext_type, $comment->cid). '</p>';
            echo theme('print', $content);
            
          } else {
            
            echo t('comment', '评论未通过审核');
            
          }
        }
        
      } else {
        echo t('comment', '无效的评论 ID');
      }
      
    break;
  }
  
  exit;
}
